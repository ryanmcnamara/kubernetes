// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by defaulter-gen. Do not edit it manually!

package v1alpha1

import (
	v1alpha1 "k8s.io/api/delegatedadmission/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/kubernetes/pkg/api/v1"
	apps_v1beta1 "k8s.io/kubernetes/pkg/apis/apps/v1beta1"
	batch_v1 "k8s.io/kubernetes/pkg/apis/batch/v1"
	v1beta1 "k8s.io/kubernetes/pkg/apis/extensions/v1beta1"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&v1alpha1.AdmissionReview{}, func(obj interface{}) { SetObjectDefaults_AdmissionReview(obj.(*v1alpha1.AdmissionReview)) })
	scheme.AddTypeDefaultingFunc(&v1alpha1.AdmissionReviewList{}, func(obj interface{}) { SetObjectDefaults_AdmissionReviewList(obj.(*v1alpha1.AdmissionReviewList)) })
	return nil
}

func SetObjectDefaults_AdmissionReview(in *v1alpha1.AdmissionReview) {
	if in.Spec.Object != nil {
		if in.Spec.Object.Namespace != nil {
			v1.SetDefaults_NamespaceStatus(&in.Spec.Object.Namespace.Status)
		}
		if in.Spec.Object.Pod != nil {
			v1.SetDefaults_Pod(in.Spec.Object.Pod)
			v1.SetDefaults_PodSpec(&in.Spec.Object.Pod.Spec)
			for i := range in.Spec.Object.Pod.Spec.Volumes {
				a := &in.Spec.Object.Pod.Spec.Volumes[i]
				v1.SetDefaults_Volume(a)
				if a.VolumeSource.HostPath != nil {
					v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
				}
				if a.VolumeSource.Secret != nil {
					v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
				}
				if a.VolumeSource.ISCSI != nil {
					v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
				}
				if a.VolumeSource.RBD != nil {
					v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
				}
				if a.VolumeSource.DownwardAPI != nil {
					v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
					for j := range a.VolumeSource.DownwardAPI.Items {
						b := &a.VolumeSource.DownwardAPI.Items[j]
						if b.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
						}
					}
				}
				if a.VolumeSource.ConfigMap != nil {
					v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
				}
				if a.VolumeSource.AzureDisk != nil {
					v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
				}
				if a.VolumeSource.Projected != nil {
					v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
					for j := range a.VolumeSource.Projected.Sources {
						b := &a.VolumeSource.Projected.Sources[j]
						if b.DownwardAPI != nil {
							for k := range b.DownwardAPI.Items {
								c := &b.DownwardAPI.Items[k]
								if c.FieldRef != nil {
									v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
								}
							}
						}
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
				}
			}
			for i := range in.Spec.Object.Pod.Spec.InitContainers {
				a := &in.Spec.Object.Pod.Spec.InitContainers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.Object.Pod.Spec.Containers {
				a := &in.Spec.Object.Pod.Spec.Containers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
		}
		if in.Spec.Object.Job != nil {
			batch_v1.SetDefaults_Job(in.Spec.Object.Job)
			v1.SetDefaults_PodSpec(&in.Spec.Object.Job.Spec.Template.Spec)
			for i := range in.Spec.Object.Job.Spec.Template.Spec.Volumes {
				a := &in.Spec.Object.Job.Spec.Template.Spec.Volumes[i]
				v1.SetDefaults_Volume(a)
				if a.VolumeSource.HostPath != nil {
					v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
				}
				if a.VolumeSource.Secret != nil {
					v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
				}
				if a.VolumeSource.ISCSI != nil {
					v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
				}
				if a.VolumeSource.RBD != nil {
					v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
				}
				if a.VolumeSource.DownwardAPI != nil {
					v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
					for j := range a.VolumeSource.DownwardAPI.Items {
						b := &a.VolumeSource.DownwardAPI.Items[j]
						if b.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
						}
					}
				}
				if a.VolumeSource.ConfigMap != nil {
					v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
				}
				if a.VolumeSource.AzureDisk != nil {
					v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
				}
				if a.VolumeSource.Projected != nil {
					v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
					for j := range a.VolumeSource.Projected.Sources {
						b := &a.VolumeSource.Projected.Sources[j]
						if b.DownwardAPI != nil {
							for k := range b.DownwardAPI.Items {
								c := &b.DownwardAPI.Items[k]
								if c.FieldRef != nil {
									v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
								}
							}
						}
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
				}
			}
			for i := range in.Spec.Object.Job.Spec.Template.Spec.InitContainers {
				a := &in.Spec.Object.Job.Spec.Template.Spec.InitContainers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.Object.Job.Spec.Template.Spec.Containers {
				a := &in.Spec.Object.Job.Spec.Template.Spec.Containers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
		}
		if in.Spec.Object.ReplicationController != nil {
			v1.SetDefaults_ReplicationController(in.Spec.Object.ReplicationController)
			if in.Spec.Object.ReplicationController.Spec.Template != nil {
				v1.SetDefaults_PodSpec(&in.Spec.Object.ReplicationController.Spec.Template.Spec)
				for i := range in.Spec.Object.ReplicationController.Spec.Template.Spec.Volumes {
					a := &in.Spec.Object.ReplicationController.Spec.Template.Spec.Volumes[i]
					v1.SetDefaults_Volume(a)
					if a.VolumeSource.HostPath != nil {
						v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
					}
					if a.VolumeSource.Secret != nil {
						v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
					}
					if a.VolumeSource.ISCSI != nil {
						v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
					}
					if a.VolumeSource.RBD != nil {
						v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
					}
					if a.VolumeSource.DownwardAPI != nil {
						v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
						for j := range a.VolumeSource.DownwardAPI.Items {
							b := &a.VolumeSource.DownwardAPI.Items[j]
							if b.FieldRef != nil {
								v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
							}
						}
					}
					if a.VolumeSource.ConfigMap != nil {
						v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
					}
					if a.VolumeSource.AzureDisk != nil {
						v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
					}
					if a.VolumeSource.Projected != nil {
						v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
						for j := range a.VolumeSource.Projected.Sources {
							b := &a.VolumeSource.Projected.Sources[j]
							if b.DownwardAPI != nil {
								for k := range b.DownwardAPI.Items {
									c := &b.DownwardAPI.Items[k]
									if c.FieldRef != nil {
										v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
									}
								}
							}
						}
					}
					if a.VolumeSource.ScaleIO != nil {
						v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
					}
				}
				for i := range in.Spec.Object.ReplicationController.Spec.Template.Spec.InitContainers {
					a := &in.Spec.Object.ReplicationController.Spec.Template.Spec.InitContainers[i]
					v1.SetDefaults_Container(a)
					for j := range a.Ports {
						b := &a.Ports[j]
						v1.SetDefaults_ContainerPort(b)
					}
					for j := range a.Env {
						b := &a.Env[j]
						if b.ValueFrom != nil {
							if b.ValueFrom.FieldRef != nil {
								v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
							}
						}
					}
					v1.SetDefaults_ResourceList(&a.Resources.Limits)
					v1.SetDefaults_ResourceList(&a.Resources.Requests)
					if a.LivenessProbe != nil {
						v1.SetDefaults_Probe(a.LivenessProbe)
						if a.LivenessProbe.Handler.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
						}
					}
					if a.ReadinessProbe != nil {
						v1.SetDefaults_Probe(a.ReadinessProbe)
						if a.ReadinessProbe.Handler.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
						}
					}
					if a.Lifecycle != nil {
						if a.Lifecycle.PostStart != nil {
							if a.Lifecycle.PostStart.HTTPGet != nil {
								v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
							}
						}
						if a.Lifecycle.PreStop != nil {
							if a.Lifecycle.PreStop.HTTPGet != nil {
								v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
							}
						}
					}
				}
				for i := range in.Spec.Object.ReplicationController.Spec.Template.Spec.Containers {
					a := &in.Spec.Object.ReplicationController.Spec.Template.Spec.Containers[i]
					v1.SetDefaults_Container(a)
					for j := range a.Ports {
						b := &a.Ports[j]
						v1.SetDefaults_ContainerPort(b)
					}
					for j := range a.Env {
						b := &a.Env[j]
						if b.ValueFrom != nil {
							if b.ValueFrom.FieldRef != nil {
								v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
							}
						}
					}
					v1.SetDefaults_ResourceList(&a.Resources.Limits)
					v1.SetDefaults_ResourceList(&a.Resources.Requests)
					if a.LivenessProbe != nil {
						v1.SetDefaults_Probe(a.LivenessProbe)
						if a.LivenessProbe.Handler.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
						}
					}
					if a.ReadinessProbe != nil {
						v1.SetDefaults_Probe(a.ReadinessProbe)
						if a.ReadinessProbe.Handler.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
						}
					}
					if a.Lifecycle != nil {
						if a.Lifecycle.PostStart != nil {
							if a.Lifecycle.PostStart.HTTPGet != nil {
								v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
							}
						}
						if a.Lifecycle.PreStop != nil {
							if a.Lifecycle.PreStop.HTTPGet != nil {
								v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
							}
						}
					}
				}
			}
		}
		if in.Spec.Object.ReplicaSet != nil {
			v1beta1.SetDefaults_ReplicaSet(in.Spec.Object.ReplicaSet)
			v1.SetDefaults_PodSpec(&in.Spec.Object.ReplicaSet.Spec.Template.Spec)
			for i := range in.Spec.Object.ReplicaSet.Spec.Template.Spec.Volumes {
				a := &in.Spec.Object.ReplicaSet.Spec.Template.Spec.Volumes[i]
				v1.SetDefaults_Volume(a)
				if a.VolumeSource.HostPath != nil {
					v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
				}
				if a.VolumeSource.Secret != nil {
					v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
				}
				if a.VolumeSource.ISCSI != nil {
					v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
				}
				if a.VolumeSource.RBD != nil {
					v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
				}
				if a.VolumeSource.DownwardAPI != nil {
					v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
					for j := range a.VolumeSource.DownwardAPI.Items {
						b := &a.VolumeSource.DownwardAPI.Items[j]
						if b.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
						}
					}
				}
				if a.VolumeSource.ConfigMap != nil {
					v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
				}
				if a.VolumeSource.AzureDisk != nil {
					v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
				}
				if a.VolumeSource.Projected != nil {
					v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
					for j := range a.VolumeSource.Projected.Sources {
						b := &a.VolumeSource.Projected.Sources[j]
						if b.DownwardAPI != nil {
							for k := range b.DownwardAPI.Items {
								c := &b.DownwardAPI.Items[k]
								if c.FieldRef != nil {
									v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
								}
							}
						}
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
				}
			}
			for i := range in.Spec.Object.ReplicaSet.Spec.Template.Spec.InitContainers {
				a := &in.Spec.Object.ReplicaSet.Spec.Template.Spec.InitContainers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.Object.ReplicaSet.Spec.Template.Spec.Containers {
				a := &in.Spec.Object.ReplicaSet.Spec.Template.Spec.Containers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
		}
		if in.Spec.Object.Deployment != nil {
			v1beta1.SetDefaults_Deployment(in.Spec.Object.Deployment)
			v1.SetDefaults_PodSpec(&in.Spec.Object.Deployment.Spec.Template.Spec)
			for i := range in.Spec.Object.Deployment.Spec.Template.Spec.Volumes {
				a := &in.Spec.Object.Deployment.Spec.Template.Spec.Volumes[i]
				v1.SetDefaults_Volume(a)
				if a.VolumeSource.HostPath != nil {
					v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
				}
				if a.VolumeSource.Secret != nil {
					v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
				}
				if a.VolumeSource.ISCSI != nil {
					v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
				}
				if a.VolumeSource.RBD != nil {
					v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
				}
				if a.VolumeSource.DownwardAPI != nil {
					v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
					for j := range a.VolumeSource.DownwardAPI.Items {
						b := &a.VolumeSource.DownwardAPI.Items[j]
						if b.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
						}
					}
				}
				if a.VolumeSource.ConfigMap != nil {
					v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
				}
				if a.VolumeSource.AzureDisk != nil {
					v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
				}
				if a.VolumeSource.Projected != nil {
					v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
					for j := range a.VolumeSource.Projected.Sources {
						b := &a.VolumeSource.Projected.Sources[j]
						if b.DownwardAPI != nil {
							for k := range b.DownwardAPI.Items {
								c := &b.DownwardAPI.Items[k]
								if c.FieldRef != nil {
									v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
								}
							}
						}
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
				}
			}
			for i := range in.Spec.Object.Deployment.Spec.Template.Spec.InitContainers {
				a := &in.Spec.Object.Deployment.Spec.Template.Spec.InitContainers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.Object.Deployment.Spec.Template.Spec.Containers {
				a := &in.Spec.Object.Deployment.Spec.Template.Spec.Containers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
		}
		if in.Spec.Object.StatefulSet != nil {
			apps_v1beta1.SetDefaults_StatefulSet(in.Spec.Object.StatefulSet)
			v1.SetDefaults_PodSpec(&in.Spec.Object.StatefulSet.Spec.Template.Spec)
			for i := range in.Spec.Object.StatefulSet.Spec.Template.Spec.Volumes {
				a := &in.Spec.Object.StatefulSet.Spec.Template.Spec.Volumes[i]
				v1.SetDefaults_Volume(a)
				if a.VolumeSource.HostPath != nil {
					v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
				}
				if a.VolumeSource.Secret != nil {
					v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
				}
				if a.VolumeSource.ISCSI != nil {
					v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
				}
				if a.VolumeSource.RBD != nil {
					v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
				}
				if a.VolumeSource.DownwardAPI != nil {
					v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
					for j := range a.VolumeSource.DownwardAPI.Items {
						b := &a.VolumeSource.DownwardAPI.Items[j]
						if b.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
						}
					}
				}
				if a.VolumeSource.ConfigMap != nil {
					v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
				}
				if a.VolumeSource.AzureDisk != nil {
					v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
				}
				if a.VolumeSource.Projected != nil {
					v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
					for j := range a.VolumeSource.Projected.Sources {
						b := &a.VolumeSource.Projected.Sources[j]
						if b.DownwardAPI != nil {
							for k := range b.DownwardAPI.Items {
								c := &b.DownwardAPI.Items[k]
								if c.FieldRef != nil {
									v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
								}
							}
						}
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
				}
			}
			for i := range in.Spec.Object.StatefulSet.Spec.Template.Spec.InitContainers {
				a := &in.Spec.Object.StatefulSet.Spec.Template.Spec.InitContainers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.Object.StatefulSet.Spec.Template.Spec.Containers {
				a := &in.Spec.Object.StatefulSet.Spec.Template.Spec.Containers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.Object.StatefulSet.Spec.VolumeClaimTemplates {
				a := &in.Spec.Object.StatefulSet.Spec.VolumeClaimTemplates[i]
				v1.SetDefaults_PersistentVolumeClaim(a)
				v1.SetDefaults_ResourceList(&a.Spec.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Spec.Resources.Requests)
				v1.SetDefaults_ResourceList(&a.Status.Capacity)
			}
		}
		if in.Spec.Object.DaemonSet != nil {
			v1beta1.SetDefaults_DaemonSet(in.Spec.Object.DaemonSet)
			v1.SetDefaults_PodSpec(&in.Spec.Object.DaemonSet.Spec.Template.Spec)
			for i := range in.Spec.Object.DaemonSet.Spec.Template.Spec.Volumes {
				a := &in.Spec.Object.DaemonSet.Spec.Template.Spec.Volumes[i]
				v1.SetDefaults_Volume(a)
				if a.VolumeSource.HostPath != nil {
					v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
				}
				if a.VolumeSource.Secret != nil {
					v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
				}
				if a.VolumeSource.ISCSI != nil {
					v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
				}
				if a.VolumeSource.RBD != nil {
					v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
				}
				if a.VolumeSource.DownwardAPI != nil {
					v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
					for j := range a.VolumeSource.DownwardAPI.Items {
						b := &a.VolumeSource.DownwardAPI.Items[j]
						if b.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
						}
					}
				}
				if a.VolumeSource.ConfigMap != nil {
					v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
				}
				if a.VolumeSource.AzureDisk != nil {
					v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
				}
				if a.VolumeSource.Projected != nil {
					v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
					for j := range a.VolumeSource.Projected.Sources {
						b := &a.VolumeSource.Projected.Sources[j]
						if b.DownwardAPI != nil {
							for k := range b.DownwardAPI.Items {
								c := &b.DownwardAPI.Items[k]
								if c.FieldRef != nil {
									v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
								}
							}
						}
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
				}
			}
			for i := range in.Spec.Object.DaemonSet.Spec.Template.Spec.InitContainers {
				a := &in.Spec.Object.DaemonSet.Spec.Template.Spec.InitContainers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.Object.DaemonSet.Spec.Template.Spec.Containers {
				a := &in.Spec.Object.DaemonSet.Spec.Template.Spec.Containers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
		}
		if in.Spec.Object.Service != nil {
			v1.SetDefaults_Service(in.Spec.Object.Service)
		}
	}
	if in.Spec.OldObject != nil {
		if in.Spec.OldObject.Namespace != nil {
			v1.SetDefaults_NamespaceStatus(&in.Spec.OldObject.Namespace.Status)
		}
		if in.Spec.OldObject.Pod != nil {
			v1.SetDefaults_Pod(in.Spec.OldObject.Pod)
			v1.SetDefaults_PodSpec(&in.Spec.OldObject.Pod.Spec)
			for i := range in.Spec.OldObject.Pod.Spec.Volumes {
				a := &in.Spec.OldObject.Pod.Spec.Volumes[i]
				v1.SetDefaults_Volume(a)
				if a.VolumeSource.HostPath != nil {
					v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
				}
				if a.VolumeSource.Secret != nil {
					v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
				}
				if a.VolumeSource.ISCSI != nil {
					v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
				}
				if a.VolumeSource.RBD != nil {
					v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
				}
				if a.VolumeSource.DownwardAPI != nil {
					v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
					for j := range a.VolumeSource.DownwardAPI.Items {
						b := &a.VolumeSource.DownwardAPI.Items[j]
						if b.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
						}
					}
				}
				if a.VolumeSource.ConfigMap != nil {
					v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
				}
				if a.VolumeSource.AzureDisk != nil {
					v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
				}
				if a.VolumeSource.Projected != nil {
					v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
					for j := range a.VolumeSource.Projected.Sources {
						b := &a.VolumeSource.Projected.Sources[j]
						if b.DownwardAPI != nil {
							for k := range b.DownwardAPI.Items {
								c := &b.DownwardAPI.Items[k]
								if c.FieldRef != nil {
									v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
								}
							}
						}
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
				}
			}
			for i := range in.Spec.OldObject.Pod.Spec.InitContainers {
				a := &in.Spec.OldObject.Pod.Spec.InitContainers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.OldObject.Pod.Spec.Containers {
				a := &in.Spec.OldObject.Pod.Spec.Containers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
		}
		if in.Spec.OldObject.Job != nil {
			batch_v1.SetDefaults_Job(in.Spec.OldObject.Job)
			v1.SetDefaults_PodSpec(&in.Spec.OldObject.Job.Spec.Template.Spec)
			for i := range in.Spec.OldObject.Job.Spec.Template.Spec.Volumes {
				a := &in.Spec.OldObject.Job.Spec.Template.Spec.Volumes[i]
				v1.SetDefaults_Volume(a)
				if a.VolumeSource.HostPath != nil {
					v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
				}
				if a.VolumeSource.Secret != nil {
					v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
				}
				if a.VolumeSource.ISCSI != nil {
					v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
				}
				if a.VolumeSource.RBD != nil {
					v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
				}
				if a.VolumeSource.DownwardAPI != nil {
					v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
					for j := range a.VolumeSource.DownwardAPI.Items {
						b := &a.VolumeSource.DownwardAPI.Items[j]
						if b.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
						}
					}
				}
				if a.VolumeSource.ConfigMap != nil {
					v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
				}
				if a.VolumeSource.AzureDisk != nil {
					v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
				}
				if a.VolumeSource.Projected != nil {
					v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
					for j := range a.VolumeSource.Projected.Sources {
						b := &a.VolumeSource.Projected.Sources[j]
						if b.DownwardAPI != nil {
							for k := range b.DownwardAPI.Items {
								c := &b.DownwardAPI.Items[k]
								if c.FieldRef != nil {
									v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
								}
							}
						}
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
				}
			}
			for i := range in.Spec.OldObject.Job.Spec.Template.Spec.InitContainers {
				a := &in.Spec.OldObject.Job.Spec.Template.Spec.InitContainers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.OldObject.Job.Spec.Template.Spec.Containers {
				a := &in.Spec.OldObject.Job.Spec.Template.Spec.Containers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
		}
		if in.Spec.OldObject.ReplicationController != nil {
			v1.SetDefaults_ReplicationController(in.Spec.OldObject.ReplicationController)
			if in.Spec.OldObject.ReplicationController.Spec.Template != nil {
				v1.SetDefaults_PodSpec(&in.Spec.OldObject.ReplicationController.Spec.Template.Spec)
				for i := range in.Spec.OldObject.ReplicationController.Spec.Template.Spec.Volumes {
					a := &in.Spec.OldObject.ReplicationController.Spec.Template.Spec.Volumes[i]
					v1.SetDefaults_Volume(a)
					if a.VolumeSource.HostPath != nil {
						v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
					}
					if a.VolumeSource.Secret != nil {
						v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
					}
					if a.VolumeSource.ISCSI != nil {
						v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
					}
					if a.VolumeSource.RBD != nil {
						v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
					}
					if a.VolumeSource.DownwardAPI != nil {
						v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
						for j := range a.VolumeSource.DownwardAPI.Items {
							b := &a.VolumeSource.DownwardAPI.Items[j]
							if b.FieldRef != nil {
								v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
							}
						}
					}
					if a.VolumeSource.ConfigMap != nil {
						v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
					}
					if a.VolumeSource.AzureDisk != nil {
						v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
					}
					if a.VolumeSource.Projected != nil {
						v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
						for j := range a.VolumeSource.Projected.Sources {
							b := &a.VolumeSource.Projected.Sources[j]
							if b.DownwardAPI != nil {
								for k := range b.DownwardAPI.Items {
									c := &b.DownwardAPI.Items[k]
									if c.FieldRef != nil {
										v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
									}
								}
							}
						}
					}
					if a.VolumeSource.ScaleIO != nil {
						v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
					}
				}
				for i := range in.Spec.OldObject.ReplicationController.Spec.Template.Spec.InitContainers {
					a := &in.Spec.OldObject.ReplicationController.Spec.Template.Spec.InitContainers[i]
					v1.SetDefaults_Container(a)
					for j := range a.Ports {
						b := &a.Ports[j]
						v1.SetDefaults_ContainerPort(b)
					}
					for j := range a.Env {
						b := &a.Env[j]
						if b.ValueFrom != nil {
							if b.ValueFrom.FieldRef != nil {
								v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
							}
						}
					}
					v1.SetDefaults_ResourceList(&a.Resources.Limits)
					v1.SetDefaults_ResourceList(&a.Resources.Requests)
					if a.LivenessProbe != nil {
						v1.SetDefaults_Probe(a.LivenessProbe)
						if a.LivenessProbe.Handler.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
						}
					}
					if a.ReadinessProbe != nil {
						v1.SetDefaults_Probe(a.ReadinessProbe)
						if a.ReadinessProbe.Handler.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
						}
					}
					if a.Lifecycle != nil {
						if a.Lifecycle.PostStart != nil {
							if a.Lifecycle.PostStart.HTTPGet != nil {
								v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
							}
						}
						if a.Lifecycle.PreStop != nil {
							if a.Lifecycle.PreStop.HTTPGet != nil {
								v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
							}
						}
					}
				}
				for i := range in.Spec.OldObject.ReplicationController.Spec.Template.Spec.Containers {
					a := &in.Spec.OldObject.ReplicationController.Spec.Template.Spec.Containers[i]
					v1.SetDefaults_Container(a)
					for j := range a.Ports {
						b := &a.Ports[j]
						v1.SetDefaults_ContainerPort(b)
					}
					for j := range a.Env {
						b := &a.Env[j]
						if b.ValueFrom != nil {
							if b.ValueFrom.FieldRef != nil {
								v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
							}
						}
					}
					v1.SetDefaults_ResourceList(&a.Resources.Limits)
					v1.SetDefaults_ResourceList(&a.Resources.Requests)
					if a.LivenessProbe != nil {
						v1.SetDefaults_Probe(a.LivenessProbe)
						if a.LivenessProbe.Handler.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
						}
					}
					if a.ReadinessProbe != nil {
						v1.SetDefaults_Probe(a.ReadinessProbe)
						if a.ReadinessProbe.Handler.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
						}
					}
					if a.Lifecycle != nil {
						if a.Lifecycle.PostStart != nil {
							if a.Lifecycle.PostStart.HTTPGet != nil {
								v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
							}
						}
						if a.Lifecycle.PreStop != nil {
							if a.Lifecycle.PreStop.HTTPGet != nil {
								v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
							}
						}
					}
				}
			}
		}
		if in.Spec.OldObject.ReplicaSet != nil {
			v1beta1.SetDefaults_ReplicaSet(in.Spec.OldObject.ReplicaSet)
			v1.SetDefaults_PodSpec(&in.Spec.OldObject.ReplicaSet.Spec.Template.Spec)
			for i := range in.Spec.OldObject.ReplicaSet.Spec.Template.Spec.Volumes {
				a := &in.Spec.OldObject.ReplicaSet.Spec.Template.Spec.Volumes[i]
				v1.SetDefaults_Volume(a)
				if a.VolumeSource.HostPath != nil {
					v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
				}
				if a.VolumeSource.Secret != nil {
					v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
				}
				if a.VolumeSource.ISCSI != nil {
					v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
				}
				if a.VolumeSource.RBD != nil {
					v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
				}
				if a.VolumeSource.DownwardAPI != nil {
					v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
					for j := range a.VolumeSource.DownwardAPI.Items {
						b := &a.VolumeSource.DownwardAPI.Items[j]
						if b.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
						}
					}
				}
				if a.VolumeSource.ConfigMap != nil {
					v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
				}
				if a.VolumeSource.AzureDisk != nil {
					v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
				}
				if a.VolumeSource.Projected != nil {
					v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
					for j := range a.VolumeSource.Projected.Sources {
						b := &a.VolumeSource.Projected.Sources[j]
						if b.DownwardAPI != nil {
							for k := range b.DownwardAPI.Items {
								c := &b.DownwardAPI.Items[k]
								if c.FieldRef != nil {
									v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
								}
							}
						}
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
				}
			}
			for i := range in.Spec.OldObject.ReplicaSet.Spec.Template.Spec.InitContainers {
				a := &in.Spec.OldObject.ReplicaSet.Spec.Template.Spec.InitContainers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.OldObject.ReplicaSet.Spec.Template.Spec.Containers {
				a := &in.Spec.OldObject.ReplicaSet.Spec.Template.Spec.Containers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
		}
		if in.Spec.OldObject.Deployment != nil {
			v1beta1.SetDefaults_Deployment(in.Spec.OldObject.Deployment)
			v1.SetDefaults_PodSpec(&in.Spec.OldObject.Deployment.Spec.Template.Spec)
			for i := range in.Spec.OldObject.Deployment.Spec.Template.Spec.Volumes {
				a := &in.Spec.OldObject.Deployment.Spec.Template.Spec.Volumes[i]
				v1.SetDefaults_Volume(a)
				if a.VolumeSource.HostPath != nil {
					v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
				}
				if a.VolumeSource.Secret != nil {
					v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
				}
				if a.VolumeSource.ISCSI != nil {
					v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
				}
				if a.VolumeSource.RBD != nil {
					v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
				}
				if a.VolumeSource.DownwardAPI != nil {
					v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
					for j := range a.VolumeSource.DownwardAPI.Items {
						b := &a.VolumeSource.DownwardAPI.Items[j]
						if b.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
						}
					}
				}
				if a.VolumeSource.ConfigMap != nil {
					v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
				}
				if a.VolumeSource.AzureDisk != nil {
					v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
				}
				if a.VolumeSource.Projected != nil {
					v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
					for j := range a.VolumeSource.Projected.Sources {
						b := &a.VolumeSource.Projected.Sources[j]
						if b.DownwardAPI != nil {
							for k := range b.DownwardAPI.Items {
								c := &b.DownwardAPI.Items[k]
								if c.FieldRef != nil {
									v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
								}
							}
						}
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
				}
			}
			for i := range in.Spec.OldObject.Deployment.Spec.Template.Spec.InitContainers {
				a := &in.Spec.OldObject.Deployment.Spec.Template.Spec.InitContainers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.OldObject.Deployment.Spec.Template.Spec.Containers {
				a := &in.Spec.OldObject.Deployment.Spec.Template.Spec.Containers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
		}
		if in.Spec.OldObject.StatefulSet != nil {
			apps_v1beta1.SetDefaults_StatefulSet(in.Spec.OldObject.StatefulSet)
			v1.SetDefaults_PodSpec(&in.Spec.OldObject.StatefulSet.Spec.Template.Spec)
			for i := range in.Spec.OldObject.StatefulSet.Spec.Template.Spec.Volumes {
				a := &in.Spec.OldObject.StatefulSet.Spec.Template.Spec.Volumes[i]
				v1.SetDefaults_Volume(a)
				if a.VolumeSource.HostPath != nil {
					v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
				}
				if a.VolumeSource.Secret != nil {
					v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
				}
				if a.VolumeSource.ISCSI != nil {
					v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
				}
				if a.VolumeSource.RBD != nil {
					v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
				}
				if a.VolumeSource.DownwardAPI != nil {
					v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
					for j := range a.VolumeSource.DownwardAPI.Items {
						b := &a.VolumeSource.DownwardAPI.Items[j]
						if b.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
						}
					}
				}
				if a.VolumeSource.ConfigMap != nil {
					v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
				}
				if a.VolumeSource.AzureDisk != nil {
					v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
				}
				if a.VolumeSource.Projected != nil {
					v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
					for j := range a.VolumeSource.Projected.Sources {
						b := &a.VolumeSource.Projected.Sources[j]
						if b.DownwardAPI != nil {
							for k := range b.DownwardAPI.Items {
								c := &b.DownwardAPI.Items[k]
								if c.FieldRef != nil {
									v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
								}
							}
						}
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
				}
			}
			for i := range in.Spec.OldObject.StatefulSet.Spec.Template.Spec.InitContainers {
				a := &in.Spec.OldObject.StatefulSet.Spec.Template.Spec.InitContainers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.OldObject.StatefulSet.Spec.Template.Spec.Containers {
				a := &in.Spec.OldObject.StatefulSet.Spec.Template.Spec.Containers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.OldObject.StatefulSet.Spec.VolumeClaimTemplates {
				a := &in.Spec.OldObject.StatefulSet.Spec.VolumeClaimTemplates[i]
				v1.SetDefaults_PersistentVolumeClaim(a)
				v1.SetDefaults_ResourceList(&a.Spec.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Spec.Resources.Requests)
				v1.SetDefaults_ResourceList(&a.Status.Capacity)
			}
		}
		if in.Spec.OldObject.DaemonSet != nil {
			v1beta1.SetDefaults_DaemonSet(in.Spec.OldObject.DaemonSet)
			v1.SetDefaults_PodSpec(&in.Spec.OldObject.DaemonSet.Spec.Template.Spec)
			for i := range in.Spec.OldObject.DaemonSet.Spec.Template.Spec.Volumes {
				a := &in.Spec.OldObject.DaemonSet.Spec.Template.Spec.Volumes[i]
				v1.SetDefaults_Volume(a)
				if a.VolumeSource.HostPath != nil {
					v1.SetDefaults_HostPathVolumeSource(a.VolumeSource.HostPath)
				}
				if a.VolumeSource.Secret != nil {
					v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
				}
				if a.VolumeSource.ISCSI != nil {
					v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
				}
				if a.VolumeSource.RBD != nil {
					v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
				}
				if a.VolumeSource.DownwardAPI != nil {
					v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
					for j := range a.VolumeSource.DownwardAPI.Items {
						b := &a.VolumeSource.DownwardAPI.Items[j]
						if b.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
						}
					}
				}
				if a.VolumeSource.ConfigMap != nil {
					v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
				}
				if a.VolumeSource.AzureDisk != nil {
					v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
				}
				if a.VolumeSource.Projected != nil {
					v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
					for j := range a.VolumeSource.Projected.Sources {
						b := &a.VolumeSource.Projected.Sources[j]
						if b.DownwardAPI != nil {
							for k := range b.DownwardAPI.Items {
								c := &b.DownwardAPI.Items[k]
								if c.FieldRef != nil {
									v1.SetDefaults_ObjectFieldSelector(c.FieldRef)
								}
							}
						}
					}
				}
				if a.VolumeSource.ScaleIO != nil {
					v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
				}
			}
			for i := range in.Spec.OldObject.DaemonSet.Spec.Template.Spec.InitContainers {
				a := &in.Spec.OldObject.DaemonSet.Spec.Template.Spec.InitContainers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
			for i := range in.Spec.OldObject.DaemonSet.Spec.Template.Spec.Containers {
				a := &in.Spec.OldObject.DaemonSet.Spec.Template.Spec.Containers[i]
				v1.SetDefaults_Container(a)
				for j := range a.Ports {
					b := &a.Ports[j]
					v1.SetDefaults_ContainerPort(b)
				}
				for j := range a.Env {
					b := &a.Env[j]
					if b.ValueFrom != nil {
						if b.ValueFrom.FieldRef != nil {
							v1.SetDefaults_ObjectFieldSelector(b.ValueFrom.FieldRef)
						}
					}
				}
				v1.SetDefaults_ResourceList(&a.Resources.Limits)
				v1.SetDefaults_ResourceList(&a.Resources.Requests)
				if a.LivenessProbe != nil {
					v1.SetDefaults_Probe(a.LivenessProbe)
					if a.LivenessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
					}
				}
				if a.ReadinessProbe != nil {
					v1.SetDefaults_Probe(a.ReadinessProbe)
					if a.ReadinessProbe.Handler.HTTPGet != nil {
						v1.SetDefaults_HTTPGetAction(a.ReadinessProbe.Handler.HTTPGet)
					}
				}
				if a.Lifecycle != nil {
					if a.Lifecycle.PostStart != nil {
						if a.Lifecycle.PostStart.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PostStart.HTTPGet)
						}
					}
					if a.Lifecycle.PreStop != nil {
						if a.Lifecycle.PreStop.HTTPGet != nil {
							v1.SetDefaults_HTTPGetAction(a.Lifecycle.PreStop.HTTPGet)
						}
					}
				}
			}
		}
		if in.Spec.OldObject.Service != nil {
			v1.SetDefaults_Service(in.Spec.OldObject.Service)
		}
	}
}

func SetObjectDefaults_AdmissionReviewList(in *v1alpha1.AdmissionReviewList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_AdmissionReview(a)
	}
}
