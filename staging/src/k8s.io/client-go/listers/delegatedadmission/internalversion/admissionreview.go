/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package internalversion

import (
	v1alpha1 "k8s.io/api/delegatedadmission/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AdmissionReviewLister helps list AdmissionReviews.
type AdmissionReviewLister interface {
	// List lists all AdmissionReviews in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AdmissionReview, err error)
	// Get retrieves the AdmissionReview from the index for a given name.
	Get(name string) (*v1alpha1.AdmissionReview, error)
	AdmissionReviewListerExpansion
}

// admissionReviewLister implements the AdmissionReviewLister interface.
type admissionReviewLister struct {
	indexer cache.Indexer
}

// NewAdmissionReviewLister returns a new AdmissionReviewLister.
func NewAdmissionReviewLister(indexer cache.Indexer) AdmissionReviewLister {
	return &admissionReviewLister{indexer: indexer}
}

// List lists all AdmissionReviews in the indexer.
func (s *admissionReviewLister) List(selector labels.Selector) (ret []*v1alpha1.AdmissionReview, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AdmissionReview))
	})
	return ret, err
}

// Get retrieves the AdmissionReview from the index for a given name.
func (s *admissionReviewLister) Get(name string) (*v1alpha1.AdmissionReview, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("admissionreview"), name)
	}
	return obj.(*v1alpha1.AdmissionReview), nil
}
